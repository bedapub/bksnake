#!/usr/bin/env python
import argparse
import re
from os.path import exists, basename

import pandas as pd


if __name__ == "__main__":
    parser = argparse.ArgumentParser(
        description='Convert featureCounts to GCT.')

    parser.add_argument('--annotation', help='gene annotation file: '
                        'tab-separated geneid, gene name, and description',
                        required=True)

    parser.add_argument('--overwrite', '-f', action='store_true',
                        help='overwrite output gct file')

    parser.add_argument('--remove-suffix', '-r', action='store_true',
                        help='remove suffix from sample names')

    parser.add_argument('--remove-suffix-string', default=None,
                        help='remove fixed suffix from sample names')

    parser.add_argument('--basename', action='store_true',
                        help='keep only basename')

    parser.add_argument('--order',
                        help='comma-separated order of columns for output')

    parser.add_argument('countfiles', nargs='+',
                        help='count files generated by featureCounts')

    parser.add_argument('gct',
                        help='output GCT file')

    args = parser.parse_args()

    if not args.overwrite and exists(args.gct):
        print('Error: Output file already exists.')
        exit(1)

    annotation = pd.read_csv(args.annotation, sep='\t', header=None,
                             names=('Geneid', 'gene', 'description'))

    full_df = None

    # construct a merged DataFrame
    for fn in args.countfiles:
        df = pd.read_csv(fn, sep='\t', skiprows=1)
        assert (df.columns[:6] ==
                ['Geneid', 'Chr', 'Start', 'End', 'Strand', 'Length']).all()
        if full_df is None:
            full_df = df
        else:
            assert (full_df.iloc[:, :6] == df.iloc[:, :6]).all().all()
            full_df = full_df.join(df.iloc[:, 6:])

    if args.remove_suffix:
        cols = full_df.columns[6:]
        full_df.rename(columns=dict(zip(cols,
                                        cols.str.replace(re.compile('[.][^.]+$'), ''))),
                       inplace=True)

    if args.remove_suffix_string is not None:
        cols = full_df.columns[6:]
        cols = cols[cols.str.endswith(args.remove_suffix_string)]
        full_df.rename(columns=dict(zip(cols,
                                        cols.str.slice(stop=-len(args.remove_suffix_string)))),
                       inplace=True)

    if args.basename:
        cols = full_df.columns[6:]
        full_df.rename(columns=dict(zip(cols,
                                        cols.to_series().apply(basename))),
                       inplace=True)

    if args.order:
        output_order = args.order.split(',')
        if len(set(output_order)) != len(output_order):
            raise ValueError("Non-unique sample names provided")
        if set(output_order) != set(full_df.columns[6:]):
            raise ValueError("Mismatch between provided columns and columns in count files",
                             output_order, full_df.columns[6:])
        full_df = full_df.reindex(columns=full_df.columns[:6].tolist() + output_order)

    # check that column types are compatible
    assert annotation.Geneid.dtype == full_df.Geneid.dtype
    full_df = annotation.merge(full_df, 'right', 'Geneid')

    full_df = (full_df
               .drop(columns=[
                   'description', 'Chr', 'Start', 'End', 'Strand', 'Length'])
               .rename(columns={'Geneid': 'Name', 'gene': 'Description'}))

    with open(args.gct, 'w') as out:
        print('#1.2', file=out)
        print('{}\t{}'.format(full_df.shape[0], full_df.shape[1] - 2), file=out)
        full_df.to_csv(out, sep='\t', index=False)
